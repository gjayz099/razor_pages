@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
} 

<form>

<table class="table">
    <thead>
        
      <th scope="col">Fullname</th>
      <th scope="col">Salary</th>
      <th scope="col">Department</th>
    </thead>
  <tbody>
    <tr>
        <td>
            <select id="exampleSelect" class="form-control">
            <option></option> 
            </select>
        </td>
        <td>
            <span id="salary"></span>
        </td>
        <td>
            <span id="department"></span>
        </td>
    </tr>
  </tbody>
</table>
</form>

    @* 

     *@
@{
    // Serialize Model.Employees to JSON
    string modelStateJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Employees);
}

@section Scripts {
<script type="text/javascript">
    $(document).ready(function() {
        // Parse the JSON data to JavaScript array
        var data = @Html.Raw(modelStateJson);

        // Initialize select2 plugin with data, minimumInputLength, and placeholder
        $('#exampleSelect').select2({
            data: data.map(function(item) {
                return { id: item.id, text: item.name, salary: item.salary, department: item.department };
            }),
            matcher: matchStart,
            minimumInputLength: 3, // Set the minimum input length to 3 characters
            placeholder: '--select--', // Set the placeholder text
            allowClear: true // Allow clearing the selection
        });

        $('#exampleSelect').on('select2:select', function(e) {
            var data = e.params.data;
            $("#salary").text( data.salary);
        });

        $('#exampleSelect').on('select2:select', function(e) {
            var data = e.params.data;
            $("#department").text( data.department);
        });

    });

    function matchStart(params, data) {
        // If there are no search terms, return all of the data
        if ($.trim(params.term) === '') {
            return data;
        }

        // If the data does not have a `text` property, return null
        if (typeof data.text === 'undefined') {
            return null;
        }

        // Compare the search term with the text
        if (data.text.toUpperCase().indexOf(params.term.toUpperCase()) > -1) {
            return data;
        }

        // If the data has children, iterate through them and apply the matchStart function
        if (data.children && data.children.length > 0) {
            var filteredChildren = [];
            $.each(data.children, function (idx, child) {
                var match = matchStart(params, child);
                if (match !== null) {
                    filteredChildren.push(match);
                }
            });

            // If any children matched, return a copy of the data with the matched children
            if (filteredChildren.length > 0) {
                var modifiedData = $.extend({}, data, true);
                modifiedData.children = filteredChildren;
                return modifiedData;
            }
        }

        // If none of the above conditions were met, return null
        return null;
    }
</script>
}
